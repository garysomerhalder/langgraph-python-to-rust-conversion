searchState.loadedDescShard("langgraph", 0, "LangGraph Rust Implementation\nAdvanced state errors\nAgent errors\nCheckpoint error\nEngine execution errors\nContains the error value\nExecution error during graph traversal\nGraph-specific errors\nGraph structure error (cycles, missing nodes, etc.)\nGeneric error for unexpected conditions\nJoin error from async tasks\nMain error type for LangGraph operations\nContains the success value\nResult type for LangGraph operations\nSerialization/deserialization error\nState management error\nTool errors\nAgent capabilities module Agent capabilities for LangGraph\nCheckpointing and persistence module Checkpointing and …\nExecution engine module Graph execution engine\nReturns the argument unchanged.\nCore graph module containing graph structures and …\nCalls <code>U::from(self)</code>.\nState management module State management for LangGraph …\nStreaming and channels module\nTool integration module Tool integration framework for …\nAgent trait for implementing intelligent agents\nAgent decision\nErrors related to agent operations\nAgent memory for maintaining context\nChain of thought reasoning\nCoordination strategy for multi-agent systems\nCustom reasoning function\nHierarchical with supervisor\nMarket-based coordination\nMemory entry\nMemory capacity limits\nMulti-agent collaboration coordinator\nParallel execution\nPeer-to-peer collaboration\nPlan and execute\nReAct pattern (Reasoning + Acting)\nBasic reasoning agent implementation\nReasoning strategy for agents\nSequential execution\nTree of thoughts with exploration\nExecute an action\nAction to take\nAdd an agent to the system\nAdd entry to short-term memory\nAdd available tool\nAlternative actions considered\nClear working memory\nConfidence score (0-1)\nEntry content\nGet agent description\nEntry type (observation, action, thought, etc.)\nExecute multi-agent workflow\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImportance score (0-1)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory capacity limits\nLong-term memory (persistent knowledge)\nMaximum long-term memory size in bytes\nGet agent memory\nGet agent name\nCreate a new reasoning agent\nCreate new coordinator\nCreate new agent memory\nObserve and process input\nParameters for the action\nReason about the current situation\nReasoning behind the decision\nGet reasoning strategy\nReflect on the outcome of an action\nSet custom reasoning function\nShort-term memory (current conversation/task)\nMaximum short-term memory entries\nStore in long-term memory\nEntry timestamp\nUpdate agent memory\nUpdate working memory\nWorking memory (current reasoning state)\nA checkpoint representing a saved state\nErrors related to checkpointing\nTrait for checkpoint storage implementations\nIn-memory checkpoint storage\nTimestamp when checkpoint was created\nDelete a checkpoint\nDelete all checkpoints for a thread\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique checkpoint ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all checkpoints for a thread\nLoad a checkpoint by ID\nLoad the latest checkpoint for a thread\nOptional checkpoint metadata\nCreate a new in-memory checkpointer\nCreate a new checkpoint\nSave a checkpoint\nThe saved state\nThread ID this checkpoint belongs to\nCreate a checkpoint with custom ID\nAdd metadata to the checkpoint\nTrait for executable graph components\nExecution context management\nExecute the component\nGraph execution engine implementation\nNode execution logic\nConfiguration for execution context\nExecution scope for managing variable visibility\nMessage bus for inter-node communication\nRetry configuration\nShared execution context for all nodes\nBackoff multiplier\nBroadcast a message to all nodes\nShared configuration\nCustom configuration values\nEnable debug logging\nGet all values in the current scope chain\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from the scope chain\nGet global state value\nGet node-specific state\nGlobal state accessible to all nodes\nInitial retry delay in milliseconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum delay between retries\nMaximum parallel nodes\nMaximum number of retries\nMerge node state with global state\nMessage bus for inter-node communication\nCreate a new message bus\nCreate a new execution scope\nCreate a new shared context\nNode-specific state\nPop the current scope\nPush a new scope\nRegister a node with the message bus\nRetry configuration\nSend a message to a specific node\nSet a value in the current scope\nSet global state value\nSet node-specific state\nMaximum execution time in seconds\nExecution was cancelled\nExecution completed successfully\nExecution context for a running graph\nMain execution engine for running graphs\nErrors specific to execution\nMessage passed between nodes during execution\nMetadata about an execution\nStatus of an execution\nExecution failed\nExecution is pending\nExecution is running\nMessage channels for nodes\nEnd timestamp (if completed)\nError message if failed\nExecute a compiled graph with input\nExecution ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource node ID\nGraph being executed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage metadata\nExecution metadata\nCreate a new execution engine\nTotal nodes executed\nMessage payload\nStart timestamp\nCurrent execution state\nExecution status\nStream execution of a graph\nTarget node ID\nDefault node executor implementation\nNode executor trait\nParallel node executor for executing multiple nodes …\nNode execution with retry logic\nExecute a node\nExecute multiple nodes in parallel\nExecute node with retry logic\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new parallel executor\nCreate a new retry executor\nA compiled graph ready for execution\nErrors specific to graph operations\nMetadata associated with a graph\nMain graph structure representing a LangGraph workflow\nAdd an edge between two nodes\nAdd a node to the graph\nBuilder pattern for constructing graphs\nCommand pattern for combined state updates and control flow\nCompile the graph for execution\nConditional edge implementation for dynamic graph routing\nGraph description\nEdge types and implementations for LangGraph\nAdditional metadata as JSON\nFind all orphaned nodes (nodes with no incoming edges …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all edges for a node\nGet node by name\nGet a mutable reference to a node by name\nGet the underlying graph\nCheck if the graph has cycles\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecute the graph with given input state\nGraph name\nCreate a new empty graph\nNode types and implementations for LangGraph\nGet the number of nodes in the graph\nSet the entry point of the graph\nStream execution of the graph\nSubgraph implementation for composable workflows\nValidate the graph structure\nGraph version\nBuilder for constructing a StateGraph\nAdd a conditional edge\nAdd a conditional edge with fallback\nAdd an edge between two nodes\nAdd a node to the graph\nAdd a node with metadata\nBuild the graph\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new graph builder\nSet the entry point of the graph\nSet graph description\nSet graph metadata\nSet graph version\nCommand object that combines state updates with routing …\nResult type for node functions that return commands\nCurrent graph\nContains the error value\nTarget graph for navigation\nContains the success value\nParent graph\nNamed subgraph\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd goto to command\nNext node to execute\nAdd parallel nodes to command\nMultiple nodes for parallel execution\nNavigate to parent graph\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional metadata\nCreate a new empty command\nCreate a command for parallel execution\nSet graph target\nNavigate to parent graph\nAdd state update to command\nState updates to apply\nCreate a command with goto\nAdd metadata to command\nCreate a command with state update\nCreate a command with both update and goto\nType alias for conditional functions\nA single branch in a conditional edge\nA conditional edge that routes based on state evaluation\nBuilder for conditional routing\nAdvanced routing with multiple conditions\nType alias for routing functions that determine next node\nAdd a conditional branch\nAdd a conditional edge\nPossible target nodes with their conditions\nCondition that must be true to take this branch\nDefault target if no conditions match\nEvaluate the condition and return the target node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource node for this router\nSource node ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional metadata\nCreate a new conditional router\nCreate a new multi-conditional router\nCreate a new conditional edge\nOptional priority (higher = evaluated first)\nRoute from a given node based on state\nRoute to next node\nRoute with specific branches (for testing)\nTarget node ID\nSet the default target\nConditional edge - traversed based on condition\nConditional edge with routing logic\nDirect edge - always traversed\nRepresents an edge in the graph\nTypes of edges supported in the graph\nParallel edge - for parallel execution\nCondition name or expression\nCreate a conditional edge\nCreate a conditional edge with fallback\nCreate a direct edge\nType of the edge\nOptional fallback target\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional metadata\nCreate a parallel edge\nTarget node if condition is true\nAdd metadata to the edge\nAgent node that performs actions\nAgent node implementation\nBasic node implementation\nConditional node for branching\nConditional node for branching logic\nCustom node type\nEnd node of the graph\nRepresents a node in the graph\nFunction signature for node execution\nTrait for executable nodes\nTypes of nodes supported in the graph\nParallel execution node\nStart node of the graph\nSubgraph node\nTool node for external integrations\nTool node implementation\nExecute the node with given state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the node\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet node metadata\nOptional metadata\nType of the node\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault state mapper that passes through all data\nRecursive subgraph that can contain other subgraphs\nSelective state mapper that only maps specified keys\nTrait for mapping state between parent and subgraph\nA subgraph that can be embedded within a larger graph\nBuilder for creating graphs with subgraphs\nAdd a child subgraph\nAdd a mapping from source key to target key\nAdd a subgraph node\nBuild the final graph with subgraphs\nNested subgraphs\nExecute the subgraph with given input state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe compiled graph to execute\nUnique identifier for the subgraph\nInput mapping from parent state to subgraph state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the subgraph state is isolated from parent\nMap state from source to target\nKeys to map from source to target\nMaximum recursion depth\nCreate a new selective mapper\nCreate a new subgraph builder\nCreate a new recursive subgraph\nCreate a new subgraph\nOutput mapping from subgraph state to parent state\nThe main subgraph\nSet the input mapper\nSet whether the subgraph state is isolated\nSet the output mapper\nRepresents the state of a graph execution\nThread-safe state container\nTrait for types that can be used as state in the graph\nType alias for state data\nMetadata about the state execution\nState schema definition\nRepresents a state transition\nAdd a channel to the schema\nRecord a state transition\nAdvanced state management features for LangGraph\nApply a reducer to merge state updates\nState changes applied\nChannel definitions for state management\nChannel definitions\nCurrent node being executed\nCustom metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource node ID\nGet a value from the state\nGet a value from the state\nExecution history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetadata about the execution\nOptional transition metadata\nSchema metadata\nCreate a new graph state\nCreate a new state schema\nState reducer implementations for merging state updates\nRequired channels\nRestore state from a snapshot\nSet a value in the state\nSet a value in the state\nCreate a snapshot of the current state\nTimestamp when execution started\nState snapshot before transition\nThread ID for conversation tracking\nTimestamp of transition\nTarget node ID\nConvert to JSON representation\nNumber of transitions\nUpdate multiple values in the state\nLast update timestamp\nValidate state against schema\nCurrent state values\nCreate a new graph state with thread ID\nState snapshot manager\nState branch for parallel state exploration\nState diff for tracking changes\nErrors related to advanced state operations\nState snapshot for saving/restoring state\nState version information\nVersioned state manager\nAdded keys\nApply diff to a state\nBase version where branch started\nBranch information\nCalculate diff between two states\nCreate a new branch\nCreate a snapshot\nCreate a new version\nDelete a snapshot\nDescription of changes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current version\nGet a specific version\nCurrent version in this branch\nSnapshot ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all snapshots\nLoad a snapshot\nMerge a branch into current\nMetadata about the version\nBranch metadata\nSnapshot metadata\nModified keys (old value, new value)\nBranch name\nCreate a new versioned state manager\nCreate a new snapshot manager\nParent version (if any)\nRemoved keys\nRollback to a previous version\nState data at this version\nState data\nSwitch to a branch\nTimestamp of version creation\nTimestamp of snapshot creation\nVersion number\nVersion information\nAny type allowed\nArray channel\nBoolean channel\nRepresents a state channel with type and reducer …\nBuilder for creating channels\nTypes of channels\nCustom type with validation\nNumber channel (integer or float)\nObject channel\nString channel\nBuild the channel\nType of data in the channel\nSet default value\nDefault value if not provided\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet metadata\nChannel metadata\nCreate a new channel\nCreate a new channel builder\nApply the channel’s reducer to merge values\nSet the reducer\nOptional reducer for merging updates\nCreate a required channel\nMake the channel required\nWhether this channel is required\nValidate that a value matches the channel type\nSet default value for this channel\nAdd metadata to the channel\nSet the reducer for this channel\nAdd reducer - adds numeric values\nAppend reducer - appends to arrays\nCustom reducer that uses a provided function\nDefault reducer - last write wins\nMax reducer - keeps maximum value\nMerge reducer - deep merges objects\nMin reducer - keeps minimum value\nTrait for state reducers\nFunction type for reducer functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet reducer metadata\nReduce/merge a new value with an existing value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction tool - wraps a function as a tool\nHTTP tool - calls an HTTP API\nTrait for implementing tools\nTool authentication information\nTool chain - combines multiple tools in sequence\nTool execution context\nErrors related to tool operations\nTool usage example\nTool parameter specification\nTool registry for managing available tools\nTool result\nTool specification\nAdd a tool to the chain\nAuthentication/authorization info\nCheck if the tool can be executed in the given context\nResult data\nDefault value if not provided\nParameter description\nTool description\nExample description\nError message if failed\nUsage examples\nExecute the tool\nExecute a tool\nExecute the tool chain\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a tool by name\nGet tools by category\nInput parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available tools\nExecution metadata\nAdditional auth metadata\nExecution metadata\nParameter name\nTool name\nCreate a new tool registry\nCreate a new function tool\nCreate a new HTTP tool\nCreate a new tool chain\nExpected output\nParameter type (string, number, boolean, object, array)\nParameters accepted by the tool\nPermissions granted\nUser or service identifier\nRegister a tool\nWhether the parameter is required\nReturn type description\nValidation schema (JSON Schema format)\nGet tool specification\nCurrent state data\nSuccess flag\nCategories or tags\nExecution timeout in seconds\nValidate parameters before execution")